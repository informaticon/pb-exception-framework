name: Release
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
defaults:
  run:
    shell: pwsh
jobs:
  prepare:
    name: ⚙️ Prepare Version Variables
    runs-on: windows-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      author: ${{ steps.vars.outputs.author }}
      message: ${{ steps.vars.outputs.message }}
    steps:
    - name: "[VERSION] Checkout Code"
      uses: actions/checkout@v4
    
    - name: "[VERSION] Set Reusable Variables"
      id: vars
      run: |
        if ("${{ startsWith(github.ref, 'refs/tags/v') }}" -eq "True") {
            $version = "${{ github.ref_name }}".TrimStart('v')
            $message = git tag -l --format='%(contents)' ${{ github.ref_name }}
            $author = git for-each-ref --format='%(taggername)' refs/tags/${{ github.ref_name }}
        } else {
            $version = "0.0.0-trunk"
            $message = "Development build from ${{ github.ref_name }}"
            $author = ""
        }

        if (-not $author) {
            $author = "${{ github.event.head_commit.author.name }}"
        }

        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "message=$message" >> $env:GITHUB_OUTPUT
        echo "author=$author" >> $env:GITHUB_OUTPUT

  build-dll:
    name: 🔨 Build exf1.dll (${{ matrix.arch }})
    uses: ./.github/workflows/build-dll.yml
    strategy:
      matrix:
        arch: ["x86", "x64"]
    with:
      pb_arch: "${{ matrix.arch }}"
      pb_major: "250"
      build_type: "MinSizeRel"

  backport:
    name: 🔄 Backport to PB2022R3
    uses: ./.github/workflows/backport.yml
    secrets: inherit

  build:
    name: 🛠️ Build Project (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        arch: ["x86", "x64"]
        include:
          - arch: "x86"
            pb_compiler_url: ${{ vars.PB_COMPILER_250_X86_URL }}
            pb_compiler_flags: " /x 32 "
          - arch: "x64"
            pb_compiler_url: ${{ vars.PB_COMPILER_250_X64_URL }}
            pb_compiler_flags: " /x 64 "
    needs:
      - build-dll
      - prepare
    runs-on: [windows-latest]
    env:
      PB_ARCH: "${{ matrix.arch }}"
      PB_MAJOR: "250"
      CMAKE_BUILD_TYPE: "MinSizeRel"
      PB_COMPILER_URL: "${{ matrix.pb_compiler_url }}"
      PB_COMPILER_FLAGS: "${{ matrix.pb_compiler_flags }}"
      DLL_ARTIFACT_NAME: "exf1.dll+pb250-${{ matrix.arch }}-minsizerel"
    outputs:
      analyzer_release_file: ${{ steps.setup_environment.outputs.analyzer_release_file }}
    steps:
      - name: "[BUILD] Checkout"
        uses: actions/checkout@v4

      - name: "[BUILD] Setup environment"
        id: setup_environment
        run: |
          New-Item -ItemType Directory -Force -Path build

          $exfReleaseFile = "lib.pb.base.exception-framework@${{ needs.prepare.outputs.version }}+pb${{ env.PB_MAJOR }}-${{ env.PB_ARCH }}-${{ env.CMAKE_BUILD_TYPE }}.zip".toLower()
          $analyzerReleaseFile = "dev.win.base.exception-framework@${{ needs.prepare.outputs.version }}+pb${{ env.PB_MAJOR }}-${{ env.PB_ARCH }}-${{ env.CMAKE_BUILD_TYPE }}.zip".toLower()
          
          echo "EXF_RELEASE_FILE=$exfReleaseFile" >> $env:GITHUB_ENV
          echo "ANALYZER_RELEASE_FILE=$analyzerReleaseFile" >> $env:GITHUB_ENV
          echo "ANALYZER_RELEASE_FILE=$analyzerReleaseFile" >> $env:GITHUB_OUTPUT

      - name: "[BUILD] Setup compiler"
        run: |
          if (Get-Command "pbautobuild${{ env.PB_MAJOR }}" -ErrorAction SilentlyContinue) {
            echo "Use preinstalled PB compiler"
            echo "PB_COMPILER_EXE=pbautobuild${{ env.PB_MAJOR }}" >> $env:GITHUB_ENV
          } else {
            echo "Download PB compiler"
            Invoke-WebRequest -OutFile "compiler.zip" -Uri "${{ env.PB_COMPILER_URL }}" -Headers @{Authorization = "Bearer ${{ secrets.ARTIFACTORY_TOKEN_READ_ASSETS }}"}
            Expand-Archive -Path compiler.zip -DestinationPath "${{ github.workspace }}/compiler" -Force
            echo "PB_COMPILER_EXE=${{ github.workspace }}/compiler/pbautobuild${{ env.PB_MAJOR }}.exe" >> $env:GITHUB_ENV
            echo "${{ github.workspace }}/compiler" >> $GITHUB_PATH
          }

      - name: "[BUILD] Set Informaticon placeholders"
        env:
          PS_OAUTH_TOKEN_URL: ${{ vars.PS_OAUTH_TOKEN_URL }}
          PS_OAUTH_CLIENT_ID: ${{ vars.PS_OAUTH_CLIENT_ID }}
          PS_OAUTH_CLIENT_SECRET: ${{ secrets.PS_OAUTH_CLIENT_SECRET }}
          PS_OAUTH_SCOPE: ${{ vars.PS_OAUTH_SCOPE }}
          PS_EXCEPTION_SERVER_API_KEY: ${{ secrets.PS_EXCEPTION_SERVER_API_KEY }}
          PS_EXCEPTION_SERVER_URL: ${{ vars.PS_EXCEPTION_SERVER_URL }}
        run: |
          ./ci/replacements.ps1

      - name: Download exf1.dll
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.DLL_ARTIFACT_NAME }}
          path: .

      - name: "[BUILD] Build & Run EXF"
        run: |
          & "${{ env.PB_COMPILER_EXE }}" /pbc ${{ env.PB_COMPILER_FLAGS }} /d "${{ github.workspace }}/lib.pb.base.exception-framework.pbproj"

          ./test_exf.exe --run-all --quiet

      - name: "[BUILD] Zip EXF Artifact"
        run: |
          $FilesToZip = @(
            "exf1.pbl",
            "exf1.pbd",
            "exf1.dll"
          )
          Compress-Archive -Path $FilesToZip -DestinationPath ${{ env.EXF_RELEASE_FILE }} -Force

      - name: "[BUILD] Upload EXF Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXF_RELEASE_FILE }}
          path: ${{ env.EXF_RELEASE_FILE }}
          if-no-files-found: error

      - name: "[BUILD] Build Analyzer Artifact"
        run: |
          & "${{ env.PB_COMPILER_EXE }}" /pbc ${{ env.PB_COMPILER_FLAGS}} /d "${{ github.workspace }}/analyzer/exf_analyzer.pbproj"

      - name: "[BUILD] Zip Analyzer Artifact"
        run: |
          $FilesToZip = @(
            "exf1.pbd",
            "exf1.dll",
            "analyzer/exf_analyzer.exe",
            "analyzer/exf_analyzer.pbd",
            "analyzer/helper.db",
            "analyzer/exf_analyzer.ico"
          )
          Compress-Archive -Path $FilesToZip -DestinationPath ${{ env.ANALYZER_RELEASE_FILE }} -Force

      - name: "[BUILD] Upload Analyzer Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ANALYZER_RELEASE_FILE }}
          path: ${{ env.ANALYZER_RELEASE_FILE }}
          if-no-files-found: error

  choco-release:
    name: 📦 Release Chocolatey Package
    needs:
      - build
      - prepare
    if: startsWith(github.ref, 'refs/tags/') # Only for tag events
    runs-on: [windows-latest]
    env:
      PB_MAJOR: "250"
    steps:
      - name: "[CHOCO] Checkout Code"
        uses: actions/checkout@v4

      - name: "[CHOCO] Setup Environment"
        run: |
          echo "CHOCO_ANALYZER_PKG=dev.win.base.exception-framework@${{ needs.prepare.outputs.version }}+pb${{ env.PB_MAJOR}}-x64-minsizerel.zip" >> $env:GITHUB_ENV
       
      - name: "[CHOCO] Download EXF Analyzer Artifact"
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.CHOCO_ANALYZER_PKG }}"
          path: .

      - name: "[CHOCO] Prepare EXF Analyzer"
        run: |
          # EXF Analyzer
          Expand-Archive -Path "${{ env.CHOCO_ANALYZER_PKG }}" -DestinationPath "payload"

          # PB Runtime
          Invoke-WebRequest -OutFile "runtime.zip" -Uri "${{ vars.PB_PBDK_250_X64_URL }}"
          Expand-Archive -Path runtime.zip -DestinationPath "payload" -Force

          Compress-Archive -Path payload/* -DestinationPath ci/tools/exf_analyzer.zip

      - name: "[CHOCO] Prepare nuspec File"
        run: |
          $xmlDoc = [xml](Get-Content -Path "ci/exf_analyzer.nuspec" -Raw)
          $xmlDoc.package.metadata.version = "${{ needs.prepare.outputs.version }}"
          $xmlDoc.OuterXml | Set-Content "ci/exf_analyzer.nuspec"

      - name: "[CHOCO] Create Chocolatey Pakage"
        run: |
          $NUPKG_RELEASE_FILE = "exf-analyzer.${{ needs.prepare.outputs.version }}.nupkg"
          choco pack ci/exf_analyzer.nuspec
          echo "NUPKG_RELEASE_FILE=$NUPKG_RELEASE_FILE" >> $env:GITHUB_ENV

      - name: "[CHOCO] Upload Chocolatey Pakage"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NUPKG_RELEASE_FILE }}
          path: ${{ env.NUPKG_RELEASE_FILE }}
          if-no-files-found: error
      
      - name: "[CHOCO] Create Chocolatey Release"
        if: github.repository == 'informaticon/lib.pb.base.exception-framework'
        run: |
          choco push ${{ env.NUPKG_RELEASE_FILE }} --api-key "${{ secrets.GITHUB_TOKEN }}" --source "${{ vars.CHOCO_REGISTRY }}"
      
  axps-publish:
    name: 🔖 Publish New Version to Package Service
    needs:
      - prepare
    if: startsWith(github.ref, 'refs/tags/v') &&
      github.repository == 'informaticon/lib.pb.base.exception-framework'
    runs-on: [windows, self-hosted]
    env:
      AXP_AUTH_CID: "${{ secrets.PROD_AXP_CLIENT_ID }}"
      AXP_AUTH_CS: "${{ secrets.PROD_AXP_CLIENT_SECRET }}"
    steps:
      - name: "[AXPS] Checkout Code"
        uses: actions/checkout@v4

      - name: "[AXPS] Publish Version"
        run: |
          axp version --version "${{ needs.prepare.outputs.version }}" --comment "${{ env.MESSAGE }}" --created-by "${{ needs.prepare.outputs.author }}" --publish-only --non-interactive

  axp-release:
    name: 🚀 Create axpd Package (${{ matrix.arch }})
    needs:
      - axps-publish
      - build
      - prepare
    if: startsWith(github.ref, 'refs/tags/v') &&
      github.repository == 'informaticon/lib.pb.base.exception-framework'
    runs-on: [windows, self-hosted] # self-hosted for package signing
    strategy:
      matrix:
        arch: ["x86", "x64", "src"]
        pb_major: ["250"]
    env:
      AXP_DIST_PFXPASSPHRASE: "${{ secrets.SRVBUILDXY_PRIVATE_KEY_PASSPHRASE }}"
      AXP_AUTH_CID: "${{ secrets.PROD_AXP_CLIENT_ID }}"
      AXP_AUTH_CS: "${{ secrets.PROD_AXP_CLIENT_SECRET }}"
    steps:
      - name: "[PKG] Checkout code"
        uses: actions/checkout@v4

      - name: "[PKG] Setup Environment"
        run: |
          # package signing
          echo "AXP_DIST_PFX=$($env:SRVBUILDXY_PFX_FILE)" >> $env:GITHUB_ENV
          
          # for src, use x86 arch (there is no src arch release)
          $arch = "${{ matrix.arch }}"
          if ($arch -eq "src") {
            $arch = "x86"
          }
          
          $artifactName = "lib.pb.base.exception-framework@${{ needs.prepare.outputs.version }}+pb${{ matrix.pb_major }}-${arch}-minsizerel.zip".toLower()
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

      - name: "[PKG] Download EXF Artifact"
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .
      
      - name: "[PKG] Create axpd"
        run: |
          $zipFile = "${{ env.ARTIFACT_NAME }}"
          Expand-Archive -Path $zipFile -DestinationPath . -Force
          
          axp dist pack version.axpv --as-version "${{ env.VERSION }}" --axpd-filetype "pb${{ matrix.pb_major }}${{ matrix.arch }}" --non-interactive

          $axpdFile = Get-ChildItem -Path . -Filter *.axpd | Select-Object -First 1
          echo "AXPD_FILE=$($axpdFile.Name)" >> $env:GITHUB_ENV
      
      - name: "[PKG] Upload axpd as Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.AXPD_FILE }}
          path: ${{ env.AXPD_FILE }}
          if-no-files-found: error
      
      - name: "[PKG] Upload axpd to AXPS"
        run: |
          axp dist upload ${{ env.AXPD_FILE }} --non-interactive
      
  release:
    name: 🎉 Release
    needs:
      - build
      - choco-release
      - axp-release
      - backport
    if: startsWith(github.ref, 'refs/tags/') # Only for tag events
    runs-on: [windows-latest]
    permissions:
      contents: write
      packages: write
    steps:
      - name: "[GH] Checkout code"
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets

      - name: "[GH] GitHub Release"
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            ./release-assets/*/*.zip
            ./release-assets/*/*.nupkg
            ./release-assets/*/*.axpd
