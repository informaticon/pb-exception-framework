name: Backport
on:
  workflow_call:
  workflow_dispatch:
defaults:
  run:
    shell: pwsh
jobs:
  build-dll:
    name: Build exf1.dll
    uses: ./.github/workflows/build-dll.yml
    with:
      pb_arch: "x86"
      pb_major: "222"
      build_type: "MinSizeRel"

  backport-pb2022r3:
    runs-on: [windows-latest]
    needs:
      - build-dll
    outputs:
      release_file: ${{ steps.set_outputs.outputs.release_file }}
      vjson_file: ${{ steps.set_outputs.outputs.vjson_file }}
      version: ${{ steps.set_outputs.outputs.version }}
    env:
      PB_ARCH: "x86"
      PB_MAJOR: "222"
      CMAKE_BUILD_TYPE: "MinSizeRel"
      PB_COMPILER_URL: ${{ vars.PB_COMPILER_222_X86_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Environment
        id: setup_environment
        run: |
          # ZIP file name
          $VERSION = "0.0.0-trunk"
          if ("${{ startsWith(github.ref, 'refs/tags/v') }}" -eq "True") {
            $VERSION = "${{ github.ref_name }}".TrimStart('v')
            Write-Host "Tag detected: ${{ github.ref_name }}, using version: $VERSION"
          } else {
            Write-Host "No tag detected, using default version: $VERSION"
          }
          echo "EXF_VERSION=$VERSION" >> $env:GITHUB_ENV

          $exfReleaseFile = "lib.pb.base.exception-framework@${VERSION}+pb${{ env.PB_MAJOR }}-${{ env.PB_ARCH }}-${{ env.CMAKE_BUILD_TYPE }}.zip".toLower()
          echo "EXF_RELEASE_FILE=$exfReleaseFile" >> $env:GITHUB_ENV

      - name: Setup compiler
        run: |
          echo "Download PB compiler"
          Invoke-WebRequest -OutFile "compiler.zip" -Uri "${{ env.PB_COMPILER_URL }}" -Headers @{Authorization = "Bearer ${{ secrets.ARTIFACTORY_READ_TOKEN }}"}
          Expand-Archive -Path compiler.zip -DestinationPath "${{ github.workspace }}/compiler" -Force
          echo "PB_COMPILER_EXE=${{ github.workspace }}/compiler/pbc220.exe" >> $env:GITHUB_ENV

      - name: Set Informaticon placeholders
        env:
          PS_OAUTH_TOKEN_URL: ${{ secrets.PS_OAUTH_TOKEN_URL }}
          PS_OAUTH_CLIENT_ID: ${{ secrets.PS_OAUTH_CLIENT_ID }}
          PS_OAUTH_CLIENT_SECRET: ${{ secrets.PS_OAUTH_CLIENT_SECRET }}
          PS_OAUTH_SCOPE: ${{ secrets.PS_OAUTH_SCOPE }}
          PS_EXCEPTION_SERVER_API_KEY: ${{ secrets.PS_EXCEPTION_SERVER_API_KEY }}
          PS_EXCEPTION_SERVER_URL: ${{ vars.PS_EXCEPTION_SERVER_URL }}
        run: |
          ./ci/replacements.ps1

      - name: Download exf1.dll
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-dll.outputs.artifact_name }}
          path: .

      - name: Backport
        run: |
          # Get pbmanager
          Invoke-WebRequest -OutFile "pbmanager.exe" -Uri "${{ vars.PB_PBMANAGER_URL }}"

          ./pbmanager.exe backport --orca-runtime "${{ github.workspace }}/compiler" lib.pb.base.exception-framework.pbproj

      - name: create version.json
        run: |
          $axpvData = Get-Content -Path "version.axpv" -Raw | ConvertFrom-Json
          $tmplData = Get-Content -Path "ci/backport/version.json.tmpl" -Raw | ConvertFrom-Json

          $tmplData.package_name = $axpvData.package_name
          $tmplData.package_version = "${{ env.EXF_VERSION }}"
          $tmplData.comment = $axpvData.comment
          $tmplData.created = (git show -s --format=%ci HEAD).split(' ')[0]
          $tmplData.long_term_support = $axpvData.long_term_support
          $tmplData.dependency_bug = $axpvData.deprecated

          $mergedAdditionalInfo = @{}
          foreach ($addInfo in $axpvData.additional_info.PSObject.Properties) {
            $mergedAdditionalInfo.($addInfo.Name) = $addInfo.Value
          }
          foreach ($addInfo in $tmplData.additional_info.PSObject.Properties) {
            $mergedAdditionalInfo.($addInfo.Name) = $addInfo.Value
          }
          $tmplData.additional_info = $mergedAdditionalInfo

          $tmplData.requirements = @{}
          foreach ($req in $axpvData.requirements.PSObject.Properties) {
              $tmplData.requirements.($req.Name) = $req.Value.constraint
          }

          foreach ($depName in $tmplData.dependencies.PSObject.Properties.Name) {
              if ($axpvData.version_locks.PSObject.Properties.Name -contains $depName) {
                  $tmplData.dependencies.$depName = $axpvData.version_locks.$depName.version
              }
          }

          $vjsonData = $tmplData | ConvertTo-Json -Depth 20
          Set-Content -Path "$( $tmplData.package_name ).json" -Value $vjsonData -Encoding UTF8
          echo "VJSON_FILE=$( $tmplData.package_name ).json" >> $env:GITHUB_ENV

      - name: Compile
        run: |
          & "${{ env.PB_COMPILER_EXE }}" /d "${{ github.workspace }}\lib.pb.base.exception-framework.pbt"

      - name: Test
        run: |
          ./test_exf.exe --run-all --quiet

      - name: Zip EXF
        run: |
          $FilesToZip = @(
            "exf1.pbl",
            "exf1.pbd",
            "exf1.dll"
            "${{ env.VJSON_FILE }}"
          )
          Compress-Archive -Path $FilesToZip -DestinationPath ${{ env.EXF_RELEASE_FILE }} -Force

      - name: Upload EXF
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXF_RELEASE_FILE }}
          path: ${{ env.EXF_RELEASE_FILE }}
          if-no-files-found: error

      - name: Set Job Outputs
        id: set_outputs
        run: |
          echo "release_file=${{ env.EXF_RELEASE_FILE }}" >> $env:GITHUB_OUTPUT
          echo "vjson_file=${{ env.VJSON_FILE }}" >> $env:GITHUB_OUTPUT
          echo "version=${{ env.EXF_VERSION }}" >> $env:GITHUB_OUTPUT

  push-svn:
    if: github.repository_visibility == 'private'
    runs-on: [self-hosted]
    needs:
      - backport-pb2022r3
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.backport-pb2022r3.outputs.release_file }}
          path: ./artifact

      - name: Push SVN
        run: |
          $svnWorkspace = "./svn_folder"
          $svnComment = (git log -1 --pretty=%B)
          $repoName = ("${{ github.repository }}").Split('/')[1]
          $version = "${{ needs.backport-pb2022r3.outputs.version }}"
          $svnPath = "https://svn.informaticon.com/repos/a3"
          $vjsonFile = "${{ needs.backport-pb2022r3.outputs.vjson_file }}"
          if ($version -eq "0.0.0-trunk") {
            $svnPath = "${svnPath}/${repoName}/trunk/lib"
          } else {
            $svnPath = "${svnPath}/${repoName}/tag/${version}/lib"
          }

          svn mkdir --parents "${svnPath}" -m "init ${repoName}@${version}"
          svn checkout "${svnPath}" $svnWorkspace
          Get-ChildItem -Path $svnWorkspace -Force -Exclude '.svn' | Remove-Item -Recurse -Force

          Expand-Archive -Path "./artifact/${{ needs.backport-pb2022r3.outputs.release_file }}" -Destination $svnWorkspace

          New-Item -Path "$SvnWorkspace/version" -ItemType Directory -Force
          Move-Item -Path "$SvnWorkspace/$vjsonFile" -Destination "$SvnWorkspace/version/"
          Remove-Item -Path "$SvnWorkspace/*.pbd" -Force

          cd $SvnWorkspace
          svn status | Where-Object { $_ -match '^\?\s+(.*)' } | ForEach-Object { svn add $Matches[1] }
          svn status | Where-Object { $_ -match '^!\s+(.*)' } | ForEach-Object { svn rm $Matches[1] }
          svn commit -m "${svnComment}"
